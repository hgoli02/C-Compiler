Program -> Declaration-list
Declaration-list -> Declaration Declaration-list | EPSILON 
Declaration -> Declaration-initial Declaration-prime
Declaration-initial -> Type-specifier ID
Declaration-prime -> Fun-declaration-prime | Var-declaration-prime
Var-declaration-prime -> VAR_DEC ; | [ ARRAY_DEC NUM ] ;
Fun-declaration-prime -> ( Params ) Compound-stmt
Type-specifier -> PUSH_TYPE int PID | void
Params -> int ID Param-prime Param-list | void
Param-list -> , Param Param-list | EPSILON
Param -> Declaration-initial Param-prime
Param-prime -> [ ] | EPSILON
Compound-stmt -> { Declaration-list Statement-list }
Statement-list -> Statement Statement-list | EPSILON
Statement -> Expression-stmt | Compound-stmt | Selection-stmt | Iteration-stmt | Return-stmt | Output-stmt
Output-stmt -> output ( Expression ) OUTPUT ;
Expression-stmt -> Expression ; | break ; | ;
Selection-stmt -> if ( Expression ) Statement else Statement
Iteration-stmt -> repeat Statement until ( Expression )
Return-stmt -> return Return-stmt-prime
Return-stmt-prime -> ; | Expression ;
Expression -> Simple-expression-zegond | PID ID B
B -> = Expression ASSIGN | [ Expression ] H | Simple-expression-prime
H -> = Expression | G D C
Simple-expression-zegond -> Additive-expression-zegond C
Simple-expression-prime -> Additive-expression-prime C
C -> Relop Additive-expression | EPSILON
Relop -> < | ==
Additive-expression -> Term D
Additive-expression-prime -> Term-prime D
Additive-expression-zegond -> Term-zegond D
D -> PUSHOP Addop Term ADD_SUB D | EPSILON
Addop -> + | -
Term -> Factor G
Term-prime -> Factor-prime G
Term-zegond -> Factor-zegond G
G -> * Factor MUL G | EPSILON
Factor -> ( Expression ) | PID ID Var-call-prime | PNUM NUM
Var-call-prime -> ( Args ) | Var-prime
Var-prime -> [ Expression ] | EPSILON
Factor-prime -> ( Args ) | EPSILON
Factor-zegond -> ( Expression ) | PNUM NUM
Args -> Arg-list | EPSILON
Arg-list -> Expression Arg-list-prime
Arg-list-prime -> , Expression Arg-list-prime | EPSILON