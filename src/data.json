{
    "terminals": [
        "ID",
        ";",
        "[",
        "NUM",
        "]",
        "(",
        ")",
        "int",
        "void",
        ",",
        "{",
        "}",
        "break",
        "if",
        "else",
        "repeat",
        "until",
        "return",
        "output",
        "=",
        "<",
        "==",
        "+",
        "-",
        "*"
    ],
    "non-terminal": [
        "Program",
        "Declaration-list",
        "Declaration",
        "Declaration-initial",
        "Declaration-prime",
        "Var-declaration-prime",
        "Fun-declaration-prime",
        "Type-specifier",
        "Params",
        "Param-list",
        "Param",
        "Param-prime",
        "Compound-stmt",
        "Statement-list",
        "Statement",
        "Expression-stmt",
        "Selection-stmt",
        "Iteration-stmt",
        "Output-stmt",
        "Return-stmt",
        "Return-stmt-prime",
        "Expression",
        "B",
        "H",
        "Simple-expression-zegond",
        "Simple-expression-prime",
        "C",
        "Relop",
        "Additive-expression",
        "Additive-expression-prime",
        "Additive-expression-zegond",
        "D",
        "Addop",
        "Term",
        "Term-prime",
        "Term-zegond",
        "G",
        "Factor",
        "Var-call-prime",
        "Var-prime",
        "Factor-prime",
        "Factor-zegond",
        "Args",
        "Arg-list",
        "Arg-list-prime"
    ],
    "first": {
        "Program": [
            "int", "void", "EPSILON"
        ],
        "Declaration-list": [
            "int", "void", "EPSILON"
        ],
        "Declaration": [
            "int", "void"
        ],
        "Declaration-initial": [
            "int", "void"
        ],
        "Declaration-prime": [
            ";", "[", "("
        ],
        "Var-declaration-prime": [
            ";", "["
        ],
        "Fun-declaration-prime": ["("],
        "Type-specifier": [
            "int", "void"
        ],
        "Params": [
            "int", "void"
        ],
        "Param-list": [
            ",", "EPSILON"
        ],
        "Param": [
            "int", "void"
        ],
        "Param-prime": [
            "[", "EPSILON"
        ],
        "Compound-stmt": ["{"],
        "Output-stmt": ["output"],
        "Statement-list": [
            "ID",
            ";",
            "NUM",
            "(",
            "{",
            "break",
            "if",
            "repeat",
            "return",
            "output",
            "EPSILON"
        ],
        "Statement": [
            "ID",
            ";",
            "NUM",
            "(",
            "{",
            "break",
            "if",
            "repeat",
            "return",
            "output"
        ],
        "Expression-stmt": [
            "ID",
            ";",
            "NUM",
            "(",
            "break"
        ],
        "Selection-stmt": ["if"],
        "Iteration-stmt": ["repeat"],
        "Return-stmt": ["return"],
        "Return-stmt-prime": [
            "ID", ";", "NUM", "("
        ],
        "Expression": [
            "ID", "NUM", "("
        ],
        "B": [
            "(",
            "[",
            "=",
            "<",
            "==",
            "+",
            "-",
            "*",
            "EPSILON"
        ],
        "H": [
            "=",
            "<",
            "==",
            "+",
            "-",
            "*",
            "EPSILON"
        ],
        "Simple-expression-zegond": [
            "NUM", "("
        ],
        "Simple-expression-prime": [
            "(",
            "<",
            "==",
            "+",
            "-",
            "*",
            "EPSILON"
        ],
        "C": [
            "<", "==", "EPSILON"
        ],
        "Relop": [
            "<", "=="
        ],
        "Additive-expression": [
            "ID", "NUM", "("
        ],
        "Additive-expression-prime": [
            "(",
            "+",
            "-",
            "*",
            "EPSILON"
        ],
        "Additive-expression-zegond": [
            "NUM", "("
        ],
        "D": [
            "+", "-", "EPSILON"
        ],
        "Addop": [
            "+", "-"
        ],
        "Term": [
            "ID", "NUM", "("
        ],
        "Term-prime": [
            "(", "*", "EPSILON"
        ],
        "Term-zegond": [
            "NUM", "("
        ],
        "G": [
            "*", "EPSILON"
        ],
        "Factor": [
            "ID", "NUM", "("
        ],
        "Var-call-prime": [
            "[", "(", "EPSILON"
        ],
        "Var-prime": [
            "[", "EPSILON"
        ],
        "Factor-prime": [
            "(", "EPSILON"
        ],
        "Factor-zegond": [
            "NUM", "("
        ],
        "Args": [
            "ID", "NUM", "(", "EPSILON"
        ],
        "Arg-list": [
            "ID", "NUM", "("
        ],
        "Arg-list-prime": [",", "EPSILON"]
    },
    "follow": {
        "Program": ["$"],
        "Declaration-list": [
            "ID",
            ";",
            "NUM",
            "(",
            "{",
            "}",
            "break",
            "if",
            "repeat",
            "return",
            "output",
            "$"
        ],
        "Declaration": [
            "ID",
            ";",
            "NUM",
            "(",
            "int",
            "void",
            "{",
            "}",
            "break",
            "if",
            "repeat",
            "return",
            "output",
            "$"
        ],
        "Declaration-initial": [
            ";",
            "[",
            "(",
            ")",
            ","
        ],
        "Declaration-prime": [
            "ID",
            ";",
            "NUM",
            "(",
            "int",
            "void",
            "{",
            "}",
            "break",
            "if",
            "repeat",
            "return",
            "output",
            "$"
        ],
        "Var-declaration-prime": [
            "ID",
            ";",
            "NUM",
            "(",
            "int",
            "void",
            "{",
            "}",
            "break",
            "if",
            "repeat",
            "return",
            "output",
            "$"
        ],
        "Fun-declaration-prime": [
            "ID",
            ";",
            "NUM",
            "(",
            "int",
            "void",
            "{",
            "}",
            "break",
            "if",
            "repeat",
            "return",
            "output",
            "$"
        ],
        "Type-specifier": ["ID"],
        "Params": [")"],
        "Param-list": [")"],
        "Param": [
            ")", ","
        ],
        "Param-prime": [
            ")", ","
        ],
        "Compound-stmt": [
            "ID",
            ";",
            "NUM",
            "(",
            "int",
            "void",
            "{",
            "}",
            "break",
            "if",
            "else",
            "repeat",
            "until",
            "return",
            "output",
            "$"
        ],
        "Statement-list": ["}"],
        "Statement": [
            "ID",
            ";",
            "NUM",
            "(",
            "int",
            "void",
            "{",
            "}",
            "break",
            "if",
            "else",
            "repeat",
            "until",
            "return",
            "output"
        ],
        "Output-stmt": [
            "ID",
            ";",
            "NUM",
            "(",
            "int",
            "void",
            "{",
            "}",
            "break",
            "if",
            "else",
            "repeat",
            "until",
            "return",
            "output"
        ],
        "Expression-stmt": [
            "ID",
            ";",
            "NUM",
            "(",
            "int",
            "void",
            "{",
            "}",
            "break",
            "if",
            "else",
            "repeat",
            "until",
            "output",
            "return"
        ],
        "Selection-stmt": [
            "ID",
            ";",
            "NUM",
            "(",
            "int",
            "void",
            "{",
            "}",
            "break",
            "if",
            "else",
            "repeat",
            "until",
            "output",
            "return"
        ],
        "Iteration-stmt": [
            "ID",
            ";",
            "NUM",
            "(",
            "int",
            "void",
            "{",
            "}",
            "break",
            "if",
            "else",
            "repeat",
            "until",
            "output",
            "return"
        ],
        "Return-stmt": [
            "ID",
            ";",
            "NUM",
            "(",
            "int",
            "void",
            "{",
            "}",
            "break",
            "if",
            "else",
            "repeat",
            "until",
            "output",
            "return"
        ],
        "Return-stmt-prime": [
            "ID",
            ";",
            "NUM",
            "(",
            "int",
            "void",
            "{",
            "}",
            "break",
            "if",
            "else",
            "repeat",
            "until",
            "output",
            "return"
        ],
        "Expression": [
            ";", "]", ")", ","
        ],
        "B": [
            ";", "]", ")", ","
        ],
        "H": [
            ";", "]", ")", ","
        ],
        "Simple-expression-zegond": [
            ";", "]", ")", ","
        ],
        "Simple-expression-prime": [
            ";", "]", ")", ","
        ],
        "C": [
            ";", "]", ")", ","
        ],
        "Relop": [
            "ID", "NUM", "("
        ],
        "Additive-expression": [
            ";", "]", ")", ","
        ],
        "Additive-expression-prime": [
            ";",
            "]",
            ")",
            ",",
            "<",
            "=="
        ],
        "Additive-expression-zegond": [
            ";",
            "]",
            ")",
            ",",
            "<",
            "=="
        ],
        "D": [
            ";",
            "]",
            ")",
            ",",
            "<",
            "=="
        ],
        "Addop": [
            "ID", "NUM", "("
        ],
        "Term": [
            ";",
            "]",
            ")",
            ",",
            "<",
            "==",
            "+",
            "-"
        ],
        "Term-prime": [
            ";",
            "]",
            ")",
            ",",
            "<",
            "==",
            "+",
            "-"
        ],
        "Term-zegond": [
            ";",
            "]",
            ")",
            ",",
            "<",
            "==",
            "+",
            "-"
        ],
        "G": [
            ";",
            "]",
            ")",
            ",",
            "<",
            "==",
            "+",
            "-"
        ],
        "Factor": [
            ";",
            "]",
            ")",
            ",",
            "<",
            "==",
            "+",
            "-",
            "*"
        ],
        "Var-call-prime": [
            ";",
            "]",
            ")",
            ",",
            "<",
            "==",
            "+",
            "-",
            "*"
        ],
        "Var-prime": [
            ";",
            "]",
            ")",
            ",",
            "<",
            "==",
            "+",
            "-",
            "*"
        ],
        "Factor-prime": [
            ";",
            "]",
            ")",
            ",",
            "<",
            "==",
            "+",
            "-",
            "*"
        ],
        "Factor-zegond": [
            ";",
            "]",
            ")",
            ",",
            "<",
            "==",
            "+",
            "-",
            "*"
        ],
        "Args": [")"],
        "Arg-list": [")"],
        "Arg-list-prime": [")"]
    }
}
